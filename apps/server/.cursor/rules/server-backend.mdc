# Express.js Server Development Guidelines

## Project Structure

- Main entry point: [apps/server/src/index.ts](mdc:apps/server/src/index.ts)
- Use TypeScript with ES modules (`"type": "module"`)
- Import database package as workspace dependency: `"database": "workspace:*"`

## Development Setup

- Use `nodemon` with `tsx` for development: `"dev": "nodemon --exec tsx src/index.ts"`
- Build with TypeScript: `"build": "tsc"`
- Production start: `"start": "node dist/index.js"`

## Database Integration

- Import database connection and schemas from the database package
- Example: `import { db, _dummy } from "database";`
- Use async/await for database operations
- Handle database errors appropriately

## API Patterns

- Use Express.js routing
- Return JSON responses for API endpoints
- Use proper HTTP status codes
- Implement error handling middleware
- Use environment variables with `dotenv`

## TypeScript Configuration

- Follow the existing TypeScript setup in [apps/server/tsconfig.json](mdc:apps/server/tsconfig.json)
- Use strict type checking
- Import types from `@types/express` and `@types/node`
